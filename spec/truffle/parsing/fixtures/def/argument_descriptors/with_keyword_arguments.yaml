subject: "Def"
description: "Argument descriptors / with keyword arguments"
notes: >
  Method parameters are described (as ArgumentDescriptor[]) in the following way:
    - ArgumentDescriptor(name = a, type = keyreq)
    - ArgumentDescriptor(name = b, type = keyreq)
  
  So the keyword arguments are described as `keyreq` variables.
focused_on_node: "org.truffleruby.language.methods.LiteralMethodDefinitionNode"
ruby: |
  def foo(a:, b:)
  end
ast: |
  LiteralMethodDefinitionNode
      attributes:
          callTargetSupplier = org.truffleruby.language.methods.CachedLazyCallTargetSupplier@...
          isDefSingleton = false
          name = "foo"
          sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 2], index=0, length=19, characters=def foo(a:, b:)\nend), staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [a, b], requiredKeywordArgumentsCount = 2, hasKeywordsRest = false}, originName = foo, blockDepth = 0, parseName = Object#foo, notes = null, argumentDescriptors = [ArgumentDescriptor(name = a, type = keyreq), ArgumentDescriptor(name = b, type = keyreq)])
      call targets:
          RubyMethodRootNode
              attributes:
                  arityForCheck = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [a, b], requiredKeywordArgumentsCount = 2, hasKeywordsRest = false}
                  callTarget = Object#foo
                  checkArityProfile = false
                  frameDescriptor = FrameDescriptor@...{#0:(self), #1:%$~_, #2:%method_block_arg, #3:a, #4:b}
                  instrumentationBits = 0
                  keywordArguments = true
                  localReturnProfile = false
                  lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                  matchingReturnProfile = false
                  nonMatchingReturnProfile = false
                  polyglotRef = org.truffleruby.RubyLanguage@...
                  retryProfile = false
                  returnID = org.truffleruby.language.control.ReturnID@...
                  sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 2], index=0, length=19, characters=def foo(a:, b:)\nend), staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [a, b], requiredKeywordArgumentsCount = 2, hasKeywordsRest = false}, originName = foo, blockDepth = 0, parseName = Object#foo, notes = null, argumentDescriptors = [ArgumentDescriptor(name = a, type = keyreq), ArgumentDescriptor(name = b, type = keyreq)])
                  sourceSection = SourceSection(source=<parse_ast> [1 - 2], index=0, length=19, characters=def foo(a:, b:)\nend)
                  split = HEURISTIC
              children:
                  body =
                      SequenceNode
                          children:
                              body = [
                                  WriteLocalVariableNode
                                      attributes:
                                          frameSlot = 0
                                      children:
                                          valueNode =
                                              ProfileArgumentNodeGen
                                                  children:
                                                      childNode_ =
                                                          ReadSelfNode
                                  SaveMethodBlockNode
                                      attributes:
                                          slot = 2
                                  WriteLocalVariableNode
                                      attributes:
                                          frameSlot = 3
                                      children:
                                          valueNode =
                                              ReadKeywordArgumentNodeGen
                                                  attributes:
                                                      name = :a
                                                  children:
                                                      readUserKeywordsHashNode =
                                                          ReadUserKeywordsHashNode
                                  WriteLocalVariableNode
                                      attributes:
                                          frameSlot = 4
                                      children:
                                          valueNode =
                                              ReadKeywordArgumentNodeGen
                                                  attributes:
                                                      name = :b
                                                  children:
                                                      readUserKeywordsHashNode =
                                                          ReadUserKeywordsHashNode
                                  NilLiteralNode
                                      attributes:
                                          isImplicit = false
                              ]
                  checkKeywordArityNode =
                      CheckKeywordArityNode
                          attributes:
                              arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [a, b], requiredKeywordArgumentsCount = 2, hasKeywordsRest = false}
                          children:
                              readUserKeywordsHashNode =
                                  ReadUserKeywordsHashNode