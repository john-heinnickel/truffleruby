subject: "Def"
description: "Name / Singleton / in an anonymous module"
notes: >
  Method name is prefixed with "<singleton class>#":
  
    parseName = <singleton class>#foo
focused_on_node: "org.truffleruby.language.methods.BlockDefinitionNode"
ruby: |
  Module.new do
    bar = "bar"
    def bar.foo
    end
  end
ast: |
  BlockDefinitionNode
      attributes:
          breakID = org.truffleruby.language.control.BreakID@...
          callTargets = ProcCallTargets(callTargetForProc = block in <top (required)>, callTargetForLambda = null, altCallTargetCompiler = org.truffleruby.parser.MethodTranslator$$Lambda$.../0x...@...)
          frameOnStackMarkerSlot = 2
          sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 1], index=0, length=13, characters=Module.new do), staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in <top (required)>, blockDepth = 1, parseName = block in <top (required)>, notes = <top (required)>, argumentDescriptors = [])
          type = PROC
      children:
          readSpecialVariableStorageNode =
              TruffleKernelNodesFactory$GetSpecialVariableStorageNodeGen
      call targets:
          RubyProcRootNode
              attributes:
                  callTarget = block in <top (required)>
                  frameDescriptor = FrameDescriptor@...{#0:(self), #1:bar}
                  instrumentationBits = 0
                  lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                  nextProfile = false
                  polyglotRef = org.truffleruby.RubyLanguage@...
                  redoProfile = false
                  retryProfile = false
                  returnID = org.truffleruby.language.control.ReturnID@...
                  sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 1], index=0, length=13, characters=Module.new do), staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in <top (required)>, blockDepth = 1, parseName = block in <top (required)>, notes = <top (required)>, argumentDescriptors = [])
                  sourceSection = SourceSection(source=<parse_ast> [1 - 1], index=0, length=13, characters=Module.new do)
                  split = HEURISTIC
              children:
                  body =
                      SequenceNode
                          children:
                              body = [
                                  WriteLocalVariableNode
                                      attributes:
                                          frameSlot = 0
                                      children:
                                          valueNode =
                                              ProfileArgumentNodeGen
                                                  children:
                                                      childNode_ =
                                                          ReadSelfNode
                                  WriteLocalVariableNode
                                      attributes:
                                          frameSlot = 1
                                      children:
                                          valueNode =
                                              StringLiteralNode
                                                  attributes:
                                                      encoding = UTF-8
                                                      tstring = bar
                                  LiteralMethodDefinitionNode
                                      attributes:
                                          callTargetSupplier = org.truffleruby.language.methods.CachedLazyCallTargetSupplier@...
                                          isDefSingleton = true
                                          name = "foo"
                                          sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [3 - 4], index=28, length=19, characters=  def bar.foo\n  end), staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = foo, blockDepth = 0, parseName = <singleton class>#foo, notes = null, argumentDescriptors = [])
                                      children:
                                          moduleNode =
                                              SingletonClassNodeGen$SingletonClassASTNodeGen
                                                  children:
                                                      valueNode_ =
                                                          ReadLocalVariableNode
                                                              attributes:
                                                                  frameSlot = 1
                                                                  type = FRAME_LOCAL
                                      call targets:
                                          RubyMethodRootNode
                                              attributes:
                                                  arityForCheck = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}
                                                  callTarget = <singleton class>#foo
                                                  checkArityProfile = false
                                                  frameDescriptor = FrameDescriptor@...{#0:(self), #1:%$~_, #2:%method_block_arg}
                                                  instrumentationBits = 0
                                                  keywordArguments = false
                                                  localReturnProfile = false
                                                  lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                                                  matchingReturnProfile = false
                                                  nonMatchingReturnProfile = false
                                                  polyglotRef = org.truffleruby.RubyLanguage@...
                                                  retryProfile = false
                                                  returnID = org.truffleruby.language.control.ReturnID@...
                                                  sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [3 - 4], index=28, length=19, characters=  def bar.foo\n  end), staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = foo, blockDepth = 0, parseName = <singleton class>#foo, notes = null, argumentDescriptors = [])
                                                  sourceSection = SourceSection(source=<parse_ast> [3 - 4], index=28, length=19, characters=  def bar.foo\n  end)
                                                  split = HEURISTIC
                                              children:
                                                  body =
                                                      SequenceNode
                                                          children:
                                                              body = [
                                                                  WriteLocalVariableNode
                                                                      attributes:
                                                                          frameSlot = 0
                                                                      children:
                                                                          valueNode =
                                                                              ProfileArgumentNodeGen
                                                                                  children:
                                                                                      childNode_ =
                                                                                          ReadSelfNode
                                                                  SaveMethodBlockNode
                                                                      attributes:
                                                                          slot = 2
                                                                  NilLiteralNode
                                                                      attributes:
                                                                          isImplicit = false
                                                              ]
                              ]