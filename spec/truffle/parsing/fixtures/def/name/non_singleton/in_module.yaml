subject: "Def"
description: "Name / Non singleton / in a module"
notes: >
  Method name is prefixed with a module name + "#":
  
    parseName = A#foo
focused_on_node: "org.truffleruby.language.objects.RunModuleDefinitionNode"
ruby: |
  module A
    def foo
    end
  end
ast: |
  RunModuleDefinitionNode
      attributes:
          flags = 1
          moduleBodyDefinition = ModuleBodyDefinition(name = <module:A>, sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 4], index=0, length=28, characters=module A\n  def foo\n  end\nend), staticLexicalScope =  :: null :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = <module:A>, blockDepth = 0, parseName = <module:A>, notes = null, argumentDescriptors = null), callTarget = <module:A>, staticLexicalScope =  :: null :: Object, dynamicLexicalScopes = null)
      children:
          callModuleDefinitionNode =
              DefaultIndirectCallNode
          definingModule =
              DefineModuleNodeGen
                  attributes:
                      flags = 0
                      name = "A"
                  children:
                      lexicalParentModuleNode_ =
                          LexicalScopeNode
                              attributes:
                                  flags = 0
                                  lexicalScope =  :: Object
      call targets:
          RubyRootNode
              attributes:
                  callTarget = <module:A>
                  frameDescriptor = FrameDescriptor@...{#0:(self), #1:%$~_}
                  instrumentationBits = 0
                  lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                  polyglotRef = org.truffleruby.RubyLanguage@...
                  returnID = org.truffleruby.language.control.ReturnID@...
                  sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 4], index=0, length=28, characters=module A\n  def foo\n  end\nend), staticLexicalScope =  :: null :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = <module:A>, blockDepth = 0, parseName = <module:A>, notes = null, argumentDescriptors = null)
                  sourceSection = SourceSection(source=<parse_ast> [1 - 4], index=0, length=28, characters=module A\n  def foo\n  end\nend)
                  split = NEVER
              children:
                  body =
                      SequenceNode
                          attributes:
                              flags = 12
                          children:
                              body = [
                                  WriteLocalVariableNode
                                      attributes:
                                          flags = 0
                                          frameSlot = 0
                                      children:
                                          valueNode =
                                              ProfileArgumentNodeGen
                                                  attributes:
                                                      flags = 0
                                                  children:
                                                      childNode_ =
                                                          ReadSelfNode
                                                              attributes:
                                                                  flags = 0
                                  InsideModuleDefinitionNode
                                      attributes:
                                          flags = 0
                                      children:
                                          body =
                                              LiteralMethodDefinitionNode
                                                  attributes:
                                                      callTargetSupplier = org.truffleruby.language.methods.CachedLazyCallTargetSupplier@...
                                                      flags = 1
                                                      isDefSingleton = false
                                                      name = "foo"
                                                      sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [2 - 3], index=9, length=15, characters=  def foo\n  end), staticLexicalScope =  :: null :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = foo, blockDepth = 0, parseName = A#foo, notes = null, argumentDescriptors = [])
                                                  call targets:
                                                      RubyMethodRootNode
                                                          attributes:
                                                              arityForCheck = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}
                                                              callTarget = A#foo
                                                              checkArityProfile = false
                                                              frameDescriptor = FrameDescriptor@...{#0:(self), #1:%$~_, #2:%method_block_arg}
                                                              instrumentationBits = 0
                                                              keywordArguments = false
                                                              localReturnProfile = false
                                                              lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                                                              matchingReturnProfile = false
                                                              nonMatchingReturnProfile = false
                                                              polyglotRef = org.truffleruby.RubyLanguage@...
                                                              retryProfile = false
                                                              returnID = org.truffleruby.language.control.ReturnID@...
                                                              sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [2 - 3], index=9, length=15, characters=  def foo\n  end), staticLexicalScope =  :: null :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = foo, blockDepth = 0, parseName = A#foo, notes = null, argumentDescriptors = [])
                                                              sourceSection = SourceSection(source=<parse_ast> [2 - 3], index=9, length=15, characters=  def foo\n  end)
                                                              split = HEURISTIC
                                                          children:
                                                              body =
                                                                  SequenceNode
                                                                      attributes:
                                                                          flags = 12
                                                                      children:
                                                                          body = [
                                                                              WriteLocalVariableNode
                                                                                  attributes:
                                                                                      flags = 0
                                                                                      frameSlot = 0
                                                                                  children:
                                                                                      valueNode =
                                                                                          ProfileArgumentNodeGen
                                                                                              attributes:
                                                                                                  flags = 0
                                                                                              children:
                                                                                                  childNode_ =
                                                                                                      ReadSelfNode
                                                                                                          attributes:
                                                                                                              flags = 0
                                                                              SaveMethodBlockNode
                                                                                  attributes:
                                                                                      flags = 0
                                                                                      slot = 2
                                                                              NilLiteralNode
                                                                                  attributes:
                                                                                      flags = 0
                                                                                      isImplicit = false
                                                                          ]
                              ]