subject: "class"
description: "class definition when there are some expressions inside a body"
notes: >
  Expressions inside a class body are represented by InsideModuleDefinitionNode and SequenceNode nodes.
focused_on_node: "org.truffleruby.language.objects.RunModuleDefinitionNode"
ruby: |
  class Foo
    1
    2
  end
ast: |
  RunModuleDefinitionNode
      attributes:
          moduleBodyDefinition = ModuleBodyDefinition(name = <class:Foo>, sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 4], index=0, length=21, characters=class Foo\n  1\n  2\nend), staticLexicalScope =  :: null :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = <class:Foo>, blockDepth = 0, parseName = <class:Foo>, notes = null, argumentDescriptors = null), callTarget = <class:Foo>, staticLexicalScope =  :: null :: Object, dynamicLexicalScopes = null)
      children:
          callModuleDefinitionNode =
              DefaultIndirectCallNode
          definingModule =
              DefineClassNode
                  attributes:
                      name = "Foo"
                  children:
                      lexicalParentModule =
                          LexicalScopeNode
                              attributes:
                                  lexicalScope =  :: Object
      call targets:
          RubyRootNode
              attributes:
                  callTarget = <class:Foo>
                  frameDescriptor = FrameDescriptor@...{#0:(self), #1:%$~_}
                  instrumentationBits = 0
                  lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                  polyglotRef = org.truffleruby.RubyLanguage@...
                  returnID = org.truffleruby.language.control.ReturnID@...
                  sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 4], index=0, length=21, characters=class Foo\n  1\n  2\nend), staticLexicalScope =  :: null :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = <class:Foo>, blockDepth = 0, parseName = <class:Foo>, notes = null, argumentDescriptors = null)
                  sourceSection = SourceSection(source=<parse_ast> [1 - 4], index=0, length=21, characters=class Foo\n  1\n  2\nend)
                  split = NEVER
              children:
                  body =
                      SequenceNode
                          children:
                              body = [
                                  WriteLocalVariableNode
                                      attributes:
                                          frameSlot = 0
                                      children:
                                          valueNode =
                                              ProfileArgumentNodeGen
                                                  children:
                                                      childNode_ =
                                                          ReadSelfNode
                                  InsideModuleDefinitionNode
                                      children:
                                          body =
                                              SequenceNode
                                                  children:
                                                      body = [
                                                          IntegerFixnumLiteralNode
                                                              attributes:
                                                                  value = 1
                                                          IntegerFixnumLiteralNode
                                                              attributes:
                                                                  value = 2
                                                      ]
                              ]