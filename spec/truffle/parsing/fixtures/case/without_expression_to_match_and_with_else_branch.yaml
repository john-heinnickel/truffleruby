subject: "case expression"
description: "case expression without expression to match and with `else` branch (case when expr ... else ... end)"
notes: >
  The case expression is represented with multiple nested `if`s.
  Each `when`'s condition is casted to boolean with BooleanCastNodeGen node.
  Missing `else` branch is represented with NilLiteralNode node.
  
  So the example below is translated to the following expression:
  
    if 42
      "forty two"
    else 100500
      "one hundred five hundred"
    else
      nil
    end
focused_on_node: "org.truffleruby.language.control.IfElseNode"
ruby: |
  case
  when 42
    "forty two"
  when 100500
    "one hundred five hundred"
  else
    "other"
  end
ast: |
  IfElseNodeGen
      attributes:
          flags = 0
      children:
          condition =
              IntegerFixnumLiteralNode
                  attributes:
                      flags = 0
                      value = 42
          elseBody =
              IfElseNodeGen
                  attributes:
                      flags = 0
                  children:
                      condition =
                          IntegerFixnumLiteralNode
                              attributes:
                                  flags = 0
                                  value = 100500
                      elseBody =
                          StringLiteralNode
                              attributes:
                                  encoding = UTF-8
                                  flags = 1
                                  tstring = other
                      thenBody =
                          StringLiteralNode
                              attributes:
                                  encoding = UTF-8
                                  flags = 1
                                  tstring = one hundred five hundred
          thenBody =
              StringLiteralNode
                  attributes:
                      encoding = UTF-8
                      flags = 1
                      tstring = forty two