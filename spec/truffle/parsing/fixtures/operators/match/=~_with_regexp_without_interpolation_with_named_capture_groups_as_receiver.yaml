subject: "Match"
description: "=~ operator/with Regexp literal as a LHS without interpolation and with named capture groups"
notes: >
  Is represented as a method call `a.=~(b)`.
  Assigns local variables with named captured groups
focused_on_node: "org.truffleruby.language.globals.ReadMatchReferenceNodes$SetNamedVariablesMatchNode"
ruby: |
  /foo(?<bar>.+)/ =~ "baz"
ast: |
  ReadMatchReferenceNodes$SetNamedVariablesMatchNode
      children:
          matchDataNode =
              RubyCallNode
                  attributes:
                      descriptor = org.truffleruby.language.arguments.EmptyArgumentsDescriptor@...
                      dispatchConfig = PROTECTED
                      emptyKeywordsProfile = false
                      isAttrAssign = false
                      isSafeNavigation = false
                      isSplatted = false
                      isVCall = false
                      lastArgIsNotHashProfile = false
                      methodName = "=~"
                      notEmptyKeywordsProfile = false
                      notRuby2KeywordsHashProfile = false
                      ruby2KeywordsHashProfile = false
                  children:
                      arguments = [
                          StringLiteralNode
                              attributes:
                                  encoding = UTF-8
                                  tstring = baz
                      ]
                      receiver =
                          ObjectLiteralNode
                              attributes:
                                  object = RubyRegexp(source = foo(?<bar>.+), options = RegexpOptions(kcode: NONE, kcodeDefault, literal), encoding = US-ASCII)
          nilSetters = [
              WriteLocalVariableNode
                  attributes:
                      frameSlot = 3
                  children:
                      valueNode =
                          NilLiteralNode
                              attributes:
                                  isImplicit = true
          ]
          readMatchNode =
              WriteLocalVariableNode
                  attributes:
                      frameSlot = 2
                  children:
                      valueNode =
                          ReadGlobalVariableNodeGen
                              attributes:
                                  name = "$~"
                              children:
                                  lookupGlobalVariableStorageNode =
                                      LookupGlobalVariableStorageNodeGen
                                          attributes:
                                              index = -1
                                              name = "$~"
          setters = [
              WriteLocalVariableNode
                  attributes:
                      frameSlot = 3
                  children:
                      valueNode =
                          MatchDataNodes$GetFixedNameMatchNode
                              attributes:
                                  symbol = :bar
                              children:
                                  getIndexNode =
                                      MatchDataNodesFactory$GetIndexNodeGen
                                          children:
                                              getValuesNode =
                                                  MatchDataNodesFactory$ValuesNodeGen
                                  readMatchNode =
                                      ReadLocalVariableNode
                                          attributes:
                                              frameSlot = 2
                                              type = FRAME_LOCAL
          ]