subject: "Flip-flop operator"
description: "in a block"
notes: >
  An additional node InitFlipFlopSlotNode is created
  in a block's outer (or parent) lexical scope.
focused_on_node: "org.truffleruby.language.methods.LiteralMethodDefinitionNode"
ruby: |
  def foo
    each do
      x = 42
      1 if (x) .. (x)
    end
  end
ast: |
  LiteralMethodDefinitionNode
      attributes:
          callTargetSupplier = org.truffleruby.language.methods.CachedLazyCallTargetSupplier@...
          isDefSingleton = false
          name = "foo"
          sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 6], index=0, length=58, characters=def foo\n  each do\n    x = 42\n    1 if (x) .. (x)\n  end\nend), staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = foo, blockDepth = 0, parseName = Object#foo, notes = null, argumentDescriptors = [])
      call targets:
          RubyMethodRootNode
              attributes:
                  arityForCheck = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}
                  callTarget = Object#foo
                  checkArityProfile = false
                  frameDescriptor = FrameDescriptor@...{#0:(self), #1:%$~_, #2:%method_block_arg, #3:%frame_on_stack_marker_0, #4:%flipflop_1}
                  instrumentationBits = 0
                  keywordArguments = false
                  localReturnProfile = false
                  lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                  matchingReturnProfile = false
                  nonMatchingReturnProfile = false
                  polyglotRef = org.truffleruby.RubyLanguage@...
                  retryProfile = false
                  returnID = org.truffleruby.language.control.ReturnID@...
                  sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 6], index=0, length=58, characters=def foo\n  each do\n    x = 42\n    1 if (x) .. (x)\n  end\nend), staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = foo, blockDepth = 0, parseName = Object#foo, notes = null, argumentDescriptors = [])
                  sourceSection = SourceSection(source=<parse_ast> [1 - 6], index=0, length=58, characters=def foo\n  each do\n    x = 42\n    1 if (x) .. (x)\n  end\nend)
                  split = HEURISTIC
              children:
                  body =
                      SequenceNode
                          children:
                              body = [
                                  InitFlipFlopSlotNode
                                      attributes:
                                          frameSlot = 4
                                  WriteLocalVariableNode
                                      attributes:
                                          frameSlot = 0
                                      children:
                                          valueNode =
                                              ProfileArgumentNodeGen
                                                  children:
                                                      childNode_ =
                                                          ReadSelfNode
                                  SaveMethodBlockNode
                                      attributes:
                                          slot = 2
                                  CatchBreakNode
                                      attributes:
                                          breakID = org.truffleruby.language.control.BreakID@...
                                          isWhile = false
                                      children:
                                          body =
                                              FrameOnStackNode
                                                  attributes:
                                                      frameOnStackMarkerSlot = 3
                                                  children:
                                                      child =
                                                          RubyCallNode
                                                              attributes:
                                                                  descriptor = org.truffleruby.language.arguments.EmptyArgumentsDescriptor@...
                                                                  dispatchConfig = PRIVATE
                                                                  emptyKeywordsProfile = false
                                                                  isAttrAssign = false
                                                                  isSafeNavigation = false
                                                                  isSplatted = false
                                                                  isVCall = false
                                                                  lastArgIsNotHashProfile = false
                                                                  methodName = "each"
                                                                  notEmptyKeywordsProfile = false
                                                                  notRuby2KeywordsHashProfile = false
                                                                  ruby2KeywordsHashProfile = false
                                                              children:
                                                                  block =
                                                                      BlockDefinitionNode
                                                                          attributes:
                                                                              breakID = org.truffleruby.language.control.BreakID@...
                                                                              callTargets = ProcCallTargets(callTargetForProc = block in Object#foo, callTargetForLambda = null, altCallTargetCompiler = org.truffleruby.parser.MethodTranslator$$Lambda$.../0x...@...)
                                                                              frameOnStackMarkerSlot = 3
                                                                              sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [2 - 2], index=8, length=9, characters=  each do), staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in foo, blockDepth = 1, parseName = block in Object#foo, notes = foo, argumentDescriptors = [])
                                                                              type = PROC
                                                                          children:
                                                                              readSpecialVariableStorageNode =
                                                                                  TruffleKernelNodesFactory$GetSpecialVariableStorageNodeGen
                                                                          call targets:
                                                                              RubyProcRootNode
                                                                                  attributes:
                                                                                      callTarget = block in Object#foo
                                                                                      frameDescriptor = FrameDescriptor@...{#0:(self), #1:x}
                                                                                      instrumentationBits = 0
                                                                                      lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                                                                                      nextProfile = false
                                                                                      polyglotRef = org.truffleruby.RubyLanguage@...
                                                                                      redoProfile = false
                                                                                      retryProfile = false
                                                                                      returnID = org.truffleruby.language.control.ReturnID@...
                                                                                      sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [2 - 2], index=8, length=9, characters=  each do), staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in foo, blockDepth = 1, parseName = block in Object#foo, notes = foo, argumentDescriptors = [])
                                                                                      sourceSection = SourceSection(source=<parse_ast> [2 - 2], index=8, length=9, characters=  each do)
                                                                                      split = HEURISTIC
                                                                                  children:
                                                                                      body =
                                                                                          SequenceNode
                                                                                              children:
                                                                                                  body = [
                                                                                                      WriteLocalVariableNode
                                                                                                          attributes:
                                                                                                              frameSlot = 0
                                                                                                          children:
                                                                                                              valueNode =
                                                                                                                  ProfileArgumentNodeGen
                                                                                                                      children:
                                                                                                                          childNode_ =
                                                                                                                              ReadSelfNode
                                                                                                      WriteLocalVariableNode
                                                                                                          attributes:
                                                                                                              frameSlot = 1
                                                                                                          children:
                                                                                                              valueNode =
                                                                                                                  IntegerFixnumLiteralNode
                                                                                                                      attributes:
                                                                                                                          value = 42
                                                                                                      IfNodeGen
                                                                                                          children:
                                                                                                              condition =
                                                                                                                  FlipFlopNodeGen
                                                                                                                      attributes:
                                                                                                                          exclusive = false
                                                                                                                          frameLevel = 1
                                                                                                                          frameSlot = 4
                                                                                                                      children:
                                                                                                                          begin =
                                                                                                                              ReadLocalVariableNode
                                                                                                                                  attributes:
                                                                                                                                      frameSlot = 1
                                                                                                                                      type = FRAME_LOCAL
                                                                                                                          end =
                                                                                                                              ReadLocalVariableNode
                                                                                                                                  attributes:
                                                                                                                                      frameSlot = 1
                                                                                                                                      type = FRAME_LOCAL
                                                                                                              thenBody =
                                                                                                                  IntegerFixnumLiteralNode
                                                                                                                      attributes:
                                                                                                                          value = 1
                                                                                                  ]
                                                                  receiver =
                                                                      SelfNode
                              ]