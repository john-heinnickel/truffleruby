subject: "Rescue keyword"
description: "rescue in a method"
notes: >
  Is represented with a TryNode node:
  - a method body is represented with a `tryPart` child node.
  - rescue branch is represented with a `rescueParts` child nodes.
focused_on_node: "org.truffleruby.language.methods.LiteralMethodDefinitionNode"
ruby: |
  def foo
    "foo"
  rescue
    42
  end
ast: |
  LiteralMethodDefinitionNode
      attributes:
          callTargetSupplier = org.truffleruby.language.methods.CachedLazyCallTargetSupplier@...
          isDefSingleton = false
          name = "foo"
          sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 5], index=0, length=31, characters=def foo\n  "foo"\nrescue\n  42\nend), staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = foo, blockDepth = 0, parseName = Object#foo, notes = null, argumentDescriptors = [])
      call targets:
          RubyMethodRootNode
              attributes:
                  arityForCheck = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}
                  callTarget = Object#foo
                  checkArityProfile = false
                  frameDescriptor = FrameDescriptor@...{#0:(self), #1:%$~_, #2:%method_block_arg}
                  instrumentationBits = 0
                  keywordArguments = false
                  localReturnProfile = false
                  lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                  matchingReturnProfile = false
                  nonMatchingReturnProfile = false
                  polyglotRef = org.truffleruby.RubyLanguage@...
                  retryProfile = false
                  returnID = org.truffleruby.language.control.ReturnID@...
                  sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 5], index=0, length=31, characters=def foo\n  "foo"\nrescue\n  42\nend), staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = foo, blockDepth = 0, parseName = Object#foo, notes = null, argumentDescriptors = [])
                  sourceSection = SourceSection(source=<parse_ast> [1 - 5], index=0, length=31, characters=def foo\n  "foo"\nrescue\n  42\nend)
                  split = HEURISTIC
              children:
                  body =
                      SequenceNode
                          children:
                              body = [
                                  WriteLocalVariableNode
                                      attributes:
                                          frameSlot = 0
                                      children:
                                          valueNode =
                                              ProfileArgumentNodeGen
                                                  children:
                                                      childNode_ =
                                                          ReadSelfNode
                                  SaveMethodBlockNode
                                      attributes:
                                          slot = 2
                                  TryNodeGen
                                      attributes:
                                          canOmitBacktrace = true
                                      children:
                                          rescueParts = [
                                              RescueStandardErrorNode
                                                  children:
                                                      rescueBody =
                                                          IntegerFixnumLiteralNode
                                                              attributes:
                                                                  value = 42
                                          ]
                                          tryPart =
                                              StringLiteralNode
                                                  attributes:
                                                      encoding = UTF-8
                                                      tstring = foo
                              ]