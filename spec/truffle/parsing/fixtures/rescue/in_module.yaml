subject: "Rescue keyword"
description: "rescue in a module"
notes: >
  Is represented with a TryNode node:
  - a module body is represented with a `tryPart` child node.
  - rescue branch is represented with a `rescueParts` child nodes.
focused_on_node: "org.truffleruby.language.objects.RunModuleDefinitionNode"
ruby: |
  module Foo
    "foo"
  rescue
    42
  end
ast: |
  RunModuleDefinitionNode
      attributes:
          moduleBodyDefinition = ModuleBodyDefinition(name = <module:Foo>, sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 5], index=0, length=34, characters=module Foo\n  "foo"\nrescue\n  42\nend), staticLexicalScope =  :: null :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = <module:Foo>, blockDepth = 0, parseName = <module:Foo>, notes = null, argumentDescriptors = null), callTarget = <module:Foo>, staticLexicalScope =  :: null :: Object, dynamicLexicalScopes = null)
      children:
          callModuleDefinitionNode =
              DefaultIndirectCallNode
          definingModule =
              DefineModuleNodeGen
                  attributes:
                      name = "Foo"
                  children:
                      lexicalParentModuleNode_ =
                          LexicalScopeNode
                              attributes:
                                  lexicalScope =  :: Object
      call targets:
          RubyRootNode
              attributes:
                  callTarget = <module:Foo>
                  frameDescriptor = FrameDescriptor@...{#0:(self), #1:%$~_}
                  instrumentationBits = 0
                  lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                  polyglotRef = org.truffleruby.RubyLanguage@...
                  returnID = org.truffleruby.language.control.ReturnID@...
                  sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 5], index=0, length=34, characters=module Foo\n  "foo"\nrescue\n  42\nend), staticLexicalScope =  :: null :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = <module:Foo>, blockDepth = 0, parseName = <module:Foo>, notes = null, argumentDescriptors = null)
                  sourceSection = SourceSection(source=<parse_ast> [1 - 5], index=0, length=34, characters=module Foo\n  "foo"\nrescue\n  42\nend)
                  split = NEVER
              children:
                  body =
                      SequenceNode
                          children:
                              body = [
                                  WriteLocalVariableNode
                                      attributes:
                                          frameSlot = 0
                                      children:
                                          valueNode =
                                              ProfileArgumentNodeGen
                                                  children:
                                                      childNode_ =
                                                          ReadSelfNode
                                  InsideModuleDefinitionNode
                                      children:
                                          body =
                                              TryNodeGen
                                                  attributes:
                                                      canOmitBacktrace = true
                                                  children:
                                                      rescueParts = [
                                                          RescueStandardErrorNode
                                                              children:
                                                                  rescueBody =
                                                                      IntegerFixnumLiteralNode
                                                                          attributes:
                                                                              value = 42
                                                      ]
                                                      tryPart =
                                                          StringLiteralNode
                                                              attributes:
                                                                  encoding = UTF-8
                                                                  tstring = foo
                              ]