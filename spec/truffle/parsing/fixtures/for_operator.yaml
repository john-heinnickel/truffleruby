subject: "For operator"
description: "for ... in ... operator"
notes: >
  for ... in loop is represented as an #each method call, so
  
  ```ruby
  for i in array do
    # ...
  end
  ```
  
  Is represented as:
  
  ```ruby
  array.each do |tmp|
    i = tmp
    # ...
  end
  ```
  
  A simplified AST for a block is the following:
  
    (WriteLocalVariableNode
      0                             # frameSlot
      (ReadSelfNode))

    (WriteLocalVariableNode
      1                             # frameSlot, variable `tmp`
      (ReadPreArgumentNode
        0)                          # index
  
    (WriteDeclarationVariableNode
      4                             # frameSlot, variable `i`
      (ReadLocalVariableNode
        1))                         # frameSlot

    (NilLiteralNode)
focused_on_node: "org.truffleruby.language.dispatch.RubyCallNode"
ruby: |
  for i in [42, 100500]
  end
ast: |
  RubyCallNode
      attributes:
          descriptor = org.truffleruby.language.arguments.EmptyArgumentsDescriptor@...
          dispatchConfig = PROTECTED
          emptyKeywordsProfile = false
          isAttrAssign = false
          isSafeNavigation = false
          isSplatted = false
          isVCall = false
          lastArgIsNotHashProfile = false
          methodName = "each"
          notEmptyKeywordsProfile = false
          notRuby2KeywordsHashProfile = false
          ruby2KeywordsHashProfile = false
      children:
          block =
              BlockDefinitionNode
                  attributes:
                      breakID = org.truffleruby.language.control.BreakID@...
                      callTargets = ProcCallTargets(callTargetForProc = block in <top (required)>, callTargetForLambda = null, altCallTargetCompiler = org.truffleruby.parser.MethodTranslator$$Lambda$.../0x...@...)
                      frameOnStackMarkerSlot = 3
                      sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 1], index=0, length=21, characters=for i in [42, 100500]), staticLexicalScope =  :: Object, arity = Arity{preRequired = 1, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in <top (required)>, blockDepth = 1, parseName = block in <top (required)>, notes = <top (required)>, argumentDescriptors = [ArgumentDescriptor(name = %for_0, type = req)])
                      type = PROC
                  children:
                      readSpecialVariableStorageNode =
                          TruffleKernelNodesFactory$GetSpecialVariableStorageNodeGen
                  call targets:
                      RubyProcRootNode
                          attributes:
                              callTarget = block in <top (required)>
                              frameDescriptor = FrameDescriptor@...{#0:(self), #1:%for_0}
                              instrumentationBits = 0
                              lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                              nextProfile = false
                              polyglotRef = org.truffleruby.RubyLanguage@...
                              redoProfile = false
                              retryProfile = false
                              returnID = org.truffleruby.language.control.ReturnID@...
                              sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 1], index=0, length=21, characters=for i in [42, 100500]), staticLexicalScope =  :: Object, arity = Arity{preRequired = 1, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in <top (required)>, blockDepth = 1, parseName = block in <top (required)>, notes = <top (required)>, argumentDescriptors = [ArgumentDescriptor(name = %for_0, type = req)])
                              sourceSection = SourceSection(source=<parse_ast> [1 - 1], index=0, length=21, characters=for i in [42, 100500])
                              split = HEURISTIC
                          children:
                              body =
                                  SequenceNode
                                      children:
                                          body = [
                                              WriteLocalVariableNode
                                                  attributes:
                                                      frameSlot = 0
                                                  children:
                                                      valueNode =
                                                          ProfileArgumentNodeGen
                                                              children:
                                                                  childNode_ =
                                                                      ReadSelfNode
                                              WriteLocalVariableNode
                                                  attributes:
                                                      frameSlot = 1
                                                  children:
                                                      valueNode =
                                                          ProfileArgumentNodeGen
                                                              children:
                                                                  childNode_ =
                                                                      ReadPreArgumentNode
                                                                          attributes:
                                                                              index = 0
                                                                              keywordArguments = false
                                                                              missingArgumentBehavior = NIL
                                              WriteDeclarationVariableNode
                                                  attributes:
                                                      frameDepth = 1
                                                      frameSlot = 4
                                                  children:
                                                      valueNode =
                                                          ReadLocalVariableNode
                                                              attributes:
                                                                  frameSlot = 1
                                                                  type = FRAME_LOCAL
                                              NilLiteralNode
                                                  attributes:
                                                      isImplicit = false
                                          ]
          receiver =
              ArrayLiteralNode$UninitialisedArrayLiteralNode
                  attributes:
                      language = org.truffleruby.RubyLanguage@...
                  children:
                      values = [
                          IntegerFixnumLiteralNode
                              attributes:
                                  value = 42
                          IntegerFixnumLiteralNode
                              attributes:
                                  value = 100500
                      ]