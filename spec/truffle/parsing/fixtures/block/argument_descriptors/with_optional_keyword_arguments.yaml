subject: "Block"
description: "Argument descriptors / with optional keyword arguments"
notes: >
  Method parameters are described (as ArgumentDescriptor[]) in the following way:
    - ArgumentDescriptor(name = a, type = keyreq)
    - ArgumentDescriptor(name = b, type = key)
    - ArgumentDescriptor(name = c, type = keyreq)
    - ArgumentDescriptor(name = d, type = key)
  
  So the optional keyword arguments are described as `key` variables.
focused_on_node: "org.truffleruby.language.methods.BlockDefinitionNode"
ruby: |
  proc do |a:, b: 42, c:, d: 100500|
  end
ast: |
  BlockDefinitionNode
      attributes:
          breakID = org.truffleruby.language.control.BreakID@...
          callTargets = ProcCallTargets(callTargetForProc = block in <top (required)>, callTargetForLambda = null, altCallTargetCompiler = org.truffleruby.parser.MethodTranslator$$Lambda$.../0x...@...)
          flags = 0
          frameOnStackMarkerSlot = 2
          sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 1], index=0, length=34, characters=proc do |a:, b: 42, c:, d: 100500|), staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [a, c, b, d], requiredKeywordArgumentsCount = 2, hasKeywordsRest = false}, originName = block in <top (required)>, blockDepth = 1, parseName = block in <top (required)>, notes = <top (required)>, argumentDescriptors = [ArgumentDescriptor(name = a, type = keyreq), ArgumentDescriptor(name = b, type = key), ArgumentDescriptor(name = c, type = keyreq), ArgumentDescriptor(name = d, type = key)])
          type = PROC
      children:
          readSpecialVariableStorageNode =
              TruffleKernelNodesFactory$GetSpecialVariableStorageNodeGen
      call targets:
          RubyProcRootNode
              attributes:
                  callTarget = block in <top (required)>
                  frameDescriptor = FrameDescriptor@...{#0:(self), #1:a, #2:b, #3:c, #4:d}
                  instrumentationBits = 0
                  lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                  nextProfile = false
                  polyglotRef = org.truffleruby.RubyLanguage@...
                  redoProfile = false
                  retryProfile = false
                  returnID = org.truffleruby.language.control.ReturnID@...
                  sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 1], index=0, length=34, characters=proc do |a:, b: 42, c:, d: 100500|), staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [a, c, b, d], requiredKeywordArgumentsCount = 2, hasKeywordsRest = false}, originName = block in <top (required)>, blockDepth = 1, parseName = block in <top (required)>, notes = <top (required)>, argumentDescriptors = [ArgumentDescriptor(name = a, type = keyreq), ArgumentDescriptor(name = b, type = key), ArgumentDescriptor(name = c, type = keyreq), ArgumentDescriptor(name = d, type = key)])
                  sourceSection = SourceSection(source=<parse_ast> [1 - 1], index=0, length=34, characters=proc do |a:, b: 42, c:, d: 100500|)
                  split = HEURISTIC
              children:
                  body =
                      SequenceNode
                          attributes:
                              flags = 12
                          children:
                              body = [
                                  WriteLocalVariableNode
                                      attributes:
                                          flags = 0
                                          frameSlot = 0
                                      children:
                                          valueNode =
                                              ProfileArgumentNodeGen
                                                  attributes:
                                                      flags = 0
                                                  children:
                                                      childNode_ =
                                                          ReadSelfNode
                                                              attributes:
                                                                  flags = 0
                                  WriteLocalVariableNode
                                      attributes:
                                          flags = 0
                                          frameSlot = 1
                                      children:
                                          valueNode =
                                              ReadKeywordArgumentNodeGen
                                                  attributes:
                                                      flags = 0
                                                      name = :a
                                                  children:
                                                      readUserKeywordsHashNode =
                                                          ReadUserKeywordsHashNode
                                  WriteLocalVariableNode
                                      attributes:
                                          flags = 0
                                          frameSlot = 2
                                      children:
                                          valueNode =
                                              ReadKeywordArgumentNodeGen
                                                  attributes:
                                                      flags = 0
                                                      name = :b
                                                  children:
                                                      defaultValue =
                                                          IntegerFixnumLiteralNode
                                                              attributes:
                                                                  flags = 0
                                                                  value = 42
                                                      readUserKeywordsHashNode =
                                                          ReadUserKeywordsHashNode
                                  WriteLocalVariableNode
                                      attributes:
                                          flags = 0
                                          frameSlot = 3
                                      children:
                                          valueNode =
                                              ReadKeywordArgumentNodeGen
                                                  attributes:
                                                      flags = 0
                                                      name = :c
                                                  children:
                                                      readUserKeywordsHashNode =
                                                          ReadUserKeywordsHashNode
                                  WriteLocalVariableNode
                                      attributes:
                                          flags = 0
                                          frameSlot = 4
                                      children:
                                          valueNode =
                                              ReadKeywordArgumentNodeGen
                                                  attributes:
                                                      flags = 0
                                                      name = :d
                                                  children:
                                                      defaultValue =
                                                          IntegerFixnumLiteralNode
                                                              attributes:
                                                                  flags = 0
                                                                  value = 100500
                                                      readUserKeywordsHashNode =
                                                          ReadUserKeywordsHashNode
                                  NilLiteralNode
                                      attributes:
                                          flags = 0
                                          isImplicit = false
                              ]
                  checkKeywordArityNode =
                      CheckKeywordArityNode
                          attributes:
                              arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [a, c, b, d], requiredKeywordArgumentsCount = 2, hasKeywordsRest = false}
                          children:
                              readUserKeywordsHashNode =
                                  ReadUserKeywordsHashNode