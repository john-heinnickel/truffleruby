subject: "Yield"
description: "yield operator with splat operator (yield *a)"
notes: >
  It's represented with YieldExpressionNode.
  
  Splat operator is represented with a SplatCastNodeGen node.
  Note that the fact of presence of the splat operator is represented by isSplatted = true.
focused_on_node: "org.truffleruby.language.methods.LiteralMethodDefinitionNode"
ruby: |
  def a
    yield *foo
  end
ast: |
  LiteralMethodDefinitionNode
      attributes:
          callTargetSupplier = org.truffleruby.language.methods.CachedLazyCallTargetSupplier@...
          isDefSingleton = false
          name = "a"
          sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 3], index=0, length=22, characters=def a\n  yield *foo\nend), staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = a, blockDepth = 0, parseName = Object#a, notes = null, argumentDescriptors = [])
      call targets:
          RubyMethodRootNode
              attributes:
                  arityForCheck = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}
                  callTarget = Object#a
                  checkArityProfile = false
                  frameDescriptor = FrameDescriptor@...{#0:(self), #1:%$~_, #2:%method_block_arg}
                  instrumentationBits = 0
                  keywordArguments = false
                  localReturnProfile = false
                  lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                  matchingReturnProfile = false
                  nonMatchingReturnProfile = false
                  polyglotRef = org.truffleruby.RubyLanguage@...
                  retryProfile = false
                  returnID = org.truffleruby.language.control.ReturnID@...
                  sharedMethodInfo = SharedMethodInfo(sourceSection = SourceSection(source=<parse_ast> [1 - 3], index=0, length=22, characters=def a\n  yield *foo\nend), staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = a, blockDepth = 0, parseName = Object#a, notes = null, argumentDescriptors = [])
                  sourceSection = SourceSection(source=<parse_ast> [1 - 3], index=0, length=22, characters=def a\n  yield *foo\nend)
                  split = HEURISTIC
              children:
                  body =
                      SequenceNode
                          children:
                              body = [
                                  WriteLocalVariableNode
                                      attributes:
                                          frameSlot = 0
                                      children:
                                          valueNode =
                                              ProfileArgumentNodeGen
                                                  children:
                                                      childNode_ =
                                                          ReadSelfNode
                                  SaveMethodBlockNode
                                      attributes:
                                          slot = 2
                                  YieldExpressionNode
                                      attributes:
                                          descriptor = org.truffleruby.language.arguments.EmptyArgumentsDescriptor@...
                                          emptyKeywordsProfile = false
                                          isSplatted = true
                                          lastArgIsNotHashProfile = false
                                          notEmptyKeywordsProfile = false
                                          notRuby2KeywordsHashProfile = false
                                          ruby2KeywordsHashProfile = false
                                      children:
                                          arguments = [
                                              SplatCastNodeGen
                                                  attributes:
                                                      conversionMethod = :to_a
                                                      copy = false
                                                      nilBehavior = CONVERT
                                                  children:
                                                      childNode_ =
                                                          RubyCallNode
                                                              attributes:
                                                                  descriptor = org.truffleruby.language.arguments.EmptyArgumentsDescriptor@...
                                                                  dispatchConfig = PRIVATE
                                                                  emptyKeywordsProfile = false
                                                                  isAttrAssign = false
                                                                  isSafeNavigation = false
                                                                  isSplatted = false
                                                                  isVCall = true
                                                                  lastArgIsNotHashProfile = false
                                                                  methodName = "foo"
                                                                  notEmptyKeywordsProfile = false
                                                                  notRuby2KeywordsHashProfile = false
                                                                  ruby2KeywordsHashProfile = false
                                                              children:
                                                                  receiver =
                                                                      SelfNode
                                          ]
                                          readBlockNode =
                                              ReadLocalVariableNode
                                                  attributes:
                                                      frameSlot = 2
                                                      type = FRAME_LOCAL
                              ]